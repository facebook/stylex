/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

/* eslint-disable no-unused-vars */

import type { StyleXVar, VarGroup, Theme } from '../src/StyleXTypes';

import * as React from 'react';
import * as stylex from '../src/stylex';
import {legacyMerge} from '../src/stylex';

const DARK = '@media (prefers-color-scheme: dark)';

const buttonTokens = stylex.defineVars({
  bgColor: {
    default: 'cyan',
    [DARK]: 'navy',
  },
  textColor: {
    default: 'black',
    [DARK]: 'white',
  },
  cornerRadius: '4px',
  paddingBlock: '4px',
  paddingInline: '8px',
});

// DefineVars creates the right type.
buttonTokens as VarGroup<
  $ReadOnly<{
    bgColor: string,
    textColor: string,
    cornerRadius: string,
    paddingBlock: string,
    paddingInline: string,
  }>,
  string,
>;
buttonTokens.bgColor as StyleXVar<string>;

const correctTheme = stylex.createTheme(buttonTokens, {
  bgColor: 'red',
  textColor: 'white',
  cornerRadius: '4px',
  paddingBlock: '4px',
  paddingInline: '8px',
});

correctTheme as Theme<typeof buttonTokens, string>;

const result: string = legacyMerge(correctTheme);
const result2: $ReadOnly<{
  className?: string,
  'data-style-src'?: string,
  style?: $ReadOnly<{ [string]: string | number }>,
}> = stylex.props(correctTheme);

const wrongTheme1 = stylex.createTheme(buttonTokens, {
  bgColor: 'red',
  textColor: 'white',
  // $FlowExpectedError[incompatible-call] - cornerRadius must be a string
  cornerRadius: 1,
  paddingBlock: '4px',
  paddingInline: '8px',
});

opaque type VarA: 'varsA' = 'varsA';
const varsA = stylex.defineVars<{ +varA1: string }, VarA>({
  varA1: 'red',
});

const themeA = stylex.createTheme(varsA, {
  varA1: 'green',
});

// Define a themeB
opaque type VarB: 'varsB' = 'varsB';
const varsB = stylex.defineVars<{ +varB1: string }, VarB>({
  varB1: 'red',
});

const themeB = stylex.createTheme(varsB, {
  varB1: 'green',
});

// Create a themeable component, allowing only themeA type
function MyComponent({ theme }: { theme: Theme<typeof varsA> }) {
  return <div {...stylex.props(theme)} />;
}

const a1: Theme<typeof varsA> = themeA;
const b1: Theme<typeof varsB> = themeB;

// $FlowExpectedError[incompatible-type-arg]
// $FlowExpectedError[prop-missing]
const bIsNotA: Theme<typeof varsA> = themeB;

// $FlowExpectedError[incompatible-type-arg]
// $FlowExpectedError[prop-missing]
const aIsNotB: Theme<typeof varsB> = themeA;

// Instantiate component with themeA
const Correct = () => <MyComponent theme={themeA} />;

// $FlowExpectedError[incompatible-type-arg]
// $FlowExpectedError[prop-missing]
const Incorrect = () => <MyComponent theme={themeB} />;

// Usage of themes with stylex.props
const p1 = stylex.props(themeA);
const p2 = stylex.props(themeB);

// $FlowExpectedError[incompatible-call] - You can apply themes, not varGroups
const v1 = stylex.props(varsA);
// $FlowExpectedError[incompatible-call] - You can apply themes, not varGroups
const v2 = stylex.props(varsB);

// It should be possible to define vars based on other vars
const varsC = stylex.defineVars({
  varC1: varsA.varA1,
});

// But the override should still be a string.
const themeC = stylex.createTheme(varsC, {
  varC1: 'green',
});

const typedTokens = stylex.defineVars({
  bgColor: stylex.types.color<string>({
    default: 'cyan',
    [DARK]: 'navy',
  }),
  cornerRadius: stylex.types.length<string | number>({
    default: '4px',
    '@media (max-width: 600px)': 0,
  }),
  translucent: stylex.types.number<number>(0.5),
  shortAnimation: stylex.types.time<string | 0>('0.5s'),
});

const _bgColor: StyleXVar<stylex.Types.Color<string>> = typedTokens.bgColor;
const _cornerRadius: StyleXVar<stylex.Types.Length<string | number>> =
  typedTokens.cornerRadius;
const _translucent: StyleXVar<stylex.Types.Num<number>> =
  typedTokens.translucent;
const _shortAnimation: StyleXVar<stylex.Types.Time<string | 0>> =
  typedTokens.shortAnimation;

const correctlyTypedTheme = stylex.createTheme(typedTokens, {
  bgColor: stylex.types.color('red'),
  cornerRadius: stylex.types.length('4px'),
  translucent: stylex.types.number(0.5),
  shortAnimation: stylex.types.time('0.5s'),
});

const correctlyTypedThemeNested = stylex.createTheme(typedTokens, {
  bgColor: stylex.types.color<string>({
    default: 'red',
    [DARK]: 'hotpink',
  }),
  cornerRadius: stylex.types.length<>({
    default: '4px',
    '@media (max-width: 600px)': 0,
  }),
  translucent: stylex.types.number<number>({
    default: 0.5,
    [DARK]: 0.8,
  }),
  shortAnimation: stylex.types.time<>({
    default: '0.5s',
    [DARK]: '1s',
    '@media (prefer-reduced-motion: reduce)': 0,
  }),
});

const wronglyTypedTheme1 = stylex.createTheme(typedTokens, {
  // $FlowExpectedError[incompatible-call] - bgColor must be be wrapped with stylex.types.color
  bgColor: {
    default: 'red',
    [DARK]: 'hotpink',
  },
  cornerRadius: stylex.types.length<>({
    default: '4px',
    '@media (max-width: 600px)': 0,
  }),
  translucent: stylex.types.number<number>({
    default: 0.5,
    [DARK]: 0.8,
  }),
  shortAnimation: stylex.types.time<>({
    default: '0.5s',
    [DARK]: '1s',
    '@media (prefer-reduced-motion: reduce)': 0,
  }),
});
