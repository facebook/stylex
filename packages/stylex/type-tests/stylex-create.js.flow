/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import stylex from '../src/stylex';
import type {
  StaticStyles,
  StyleXStyles,
  XStyle,
  MapNamespaces,
  // StaticStylesWithout,
  // StyleXStylesWithout,
  StyleXClassNameFor,
  StyleXClassName,
  CompiledStyles,
  InlineStyles,
  StyleXVar,
} from '../src/StyleXTypes';

/* eslint-disable no-unused-vars */

/**
 * EMPTY STYLES
 */
const styles1: $ReadOnly<{ foo: $ReadOnly<{ $$css: true }> }> = stylex.create({
  foo: {},
});
styles1.foo as StaticStyles<>;
styles1.foo as StaticStyles<{}>;
styles1.foo as StaticStyles<{ width?: number | string }>;
// styles1.foo as StaticStylesWithout<{ width: mixed }>;
styles1.foo as StaticStyles<{ width?: mixed }>;
styles1.foo as StyleXStyles<>;
styles1.foo as StyleXStyles<{}>;
// (styles1.foo as StyleXStylesWithout<{ width: mixed }>);
styles1.foo as StyleXStyles<{ width?: number | string }>;
styles1.foo as StyleXStyles<{ width?: mixed }>;

styles1.foo as XStyle<>;
styles1.foo as XStyle<{ width?: StyleXClassNameFor<'width', number | string> }>;
styles1.foo as XStyle<{ width?: StyleXClassNameFor<'width', mixed> }>;
styles1.foo as XStyle<{ width?: StyleXClassName }>;

stylex(styles1.foo);
stylex.props([styles1.foo]);

/**
 * SIMPLE STYLES
 */
const styles2: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%'>,
  }>,
}> = stylex.create({
  foo: {
    width: '100%',
  },
});
styles2.foo as StaticStyles<>;
styles2.foo as StaticStyles<{ width: '100%' }>;
// (styles2.foo as StaticStylesWithout<{ width: '100%' }>);
styles2.foo as StaticStyles<{ width: number | string }>;
styles2.foo as StaticStyles<{ width?: mixed, height?: string }>;
styles2.foo as StyleXStyles<>;
styles2.foo as StyleXStyles<{ width: '100%' }>;
styles2.foo as StyleXStyles<{ width: number | string }>;
styles2.foo as StyleXStyles<{ width?: mixed }>;

styles2.foo as XStyle<>;
styles2.foo as XStyle<{ width: StyleXClassNameFor<'width', '100%'> }>;
styles2.foo as XStyle<{ width: StyleXClassNameFor<'width', number | string> }>;
styles2.foo as XStyle<{ width?: StyleXClassNameFor<'width', mixed> }>;
styles2.foo as XStyle<{ width?: StyleXClassNameFor<string, mixed> }>;
styles2.foo as XStyle<{ width?: StyleXClassName }>;

stylex(styles2.foo);
stylex.props([styles2.foo]);

/**
 * FALLBACK STYLES
 */
const styles3: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%' | '200%'>,
  }>,
}> = stylex.create({
  foo: {
    width: stylex.firstThatWorks('100%', '200%'),
  },
});
styles3.foo as StaticStyles<>;
styles3.foo as StaticStyles<{ width: '100%' | '200%' }>;
styles3.foo as StaticStyles<{ width: number | string }>;
styles3.foo as StyleXStyles<>;
styles3.foo as StyleXStyles<{ width: '100%' | '200%' }>;
styles3.foo as StyleXStyles<{ width: number | string }>;
styles3.foo as StyleXStyles<{ width?: mixed }>;

styles3.foo as XStyle<>;
// $FlowExpectedError[incompatible-cast] - value can be '100%' or '200%'.
styles3.foo as XStyle<{ width: StyleXClassNameFor<'width', '100%'> }>;
styles3.foo as XStyle<{ width: StyleXClassNameFor<'width', '100%' | '200%'> }>;
styles3.foo as XStyle<{ width: StyleXClassNameFor<'width', number | string> }>;
styles3.foo as XStyle<{ width?: StyleXClassNameFor<'width', mixed> }>;

stylex(styles3.foo);
stylex.props([styles3.foo]);

/**
 * CONDITIONAL STYLES
 */
const styles4: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%' | '100dvw'>,
  }>,
}> = stylex.create({
  foo: {
    width: {
      default: '100%',
      '@supports (width: 100dvw)': '100dvw',
    },
  },
});
styles4.foo as StaticStyles<>;
styles4.foo as StaticStyles<{ width: '100%' | '100dvw' }>;
styles4.foo as StaticStyles<{ width: number | string }>;
styles4.foo as StyleXStyles<>;
styles4.foo as StyleXStyles<{ width: '100%' | '100dvw' }>;
styles4.foo as StyleXStyles<{ width: number | string }>;
styles4.foo as StyleXStyles<{ width?: mixed }>;

stylex(styles4.foo);
stylex.props([styles4.foo]);

/**
 * NESTED CONDITIONAL STYLES
 */
const styles5: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    width: StyleXClassNameFor<'width', '100%' | '100dvw' | '200%'>,
  }>,
}> = stylex.create({
  foo: {
    width: {
      default: '100%',
      '@supports (width: 100dvw)': {
        default: '100dvw',
        '@media (max-width: 1000px)': '200%',
      },
    },
  },
});
styles5.foo as StaticStyles<>;
styles5.foo as StaticStyles<{ width: '100%' | '100dvw' | '200%' }>;
styles5.foo as StaticStyles<{ width: number | string }>;
styles5.foo as StyleXStyles<>;
styles5.foo as StyleXStyles<{ width: '100%' | '100dvw' | '200%' }>;
styles5.foo as StyleXStyles<{ width: number | string }>;
styles5.foo as StyleXStyles<{ width?: mixed }>;

stylex(styles5.foo);
stylex.props([styles5.foo]);

/**
 * DYNAMIC NESTED CONDITIONAL STYLES
 */
const styles6: $ReadOnly<{
  foo: (number) => $ReadOnly<
    [
      $ReadOnly<{
        $$css: true,
        width: StyleXClassNameFor<'width', '100%' | '100dvw' | number>,
      }>,
      InlineStyles,
    ],
  >,
}> = stylex.create({
  foo: (mobile: number) => ({
    width: {
      default: '100%',
      '@supports (width: 100dvw)': {
        default: '100dvw',
        '@media (max-width: 1000px)': mobile,
      },
    },
  }),
});
// $FlowExpectedError[incompatible-cast] - Functions don't return static styles.
styles6.foo(100) as StaticStyles<>;
// $FlowExpectedError[incompatible-cast] - Functions don't return static styles.
styles6.foo(100) as StaticStyles<{ width: '100%' | '100dvw' | number }>;
// $FlowExpectedError[incompatible-cast] - Functions don't return static styles.
styles6.foo(100) as StaticStyles<{ width: number | string }>;
// Functions return StyleXStyles!
styles6.foo(100) as StyleXStyles<>;
styles6.foo(100) as StyleXStyles<{ width: '100%' | '100dvw' | number }>;
styles6.foo(100) as StyleXStyles<{ width: number | string }>;
styles6.foo(100) as StyleXStyles<{ width?: mixed }>;

styles6.foo(100)[0] as CompiledStyles;
styles6.foo(100)[1] as InlineStyles;
styles6.foo(100) as $ReadOnly<[CompiledStyles, InlineStyles]>;

// $FlowExpectedError[incompatible-call] - `stylex()` can't handle dynamic styles.
stylex(styles6.foo(100));
stylex(styles6.foo(100)[0]);
stylex.props(styles6.foo(100));

/**
 * PSEUDO-ELEMENT STYLES
 */
const styles7: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    '::before': StyleXClassNameFor<
      '::before',
      $ReadOnly<{
        width: '100%',
      }>,
    >,
  }>,
}> = stylex.create({
  foo: {
    '::before': { width: '100%' },
  },
});
styles7.foo as StaticStyles<>;
styles7.foo as StaticStyles<{ '::before': { width: '100%' } }>;
styles7.foo as StaticStyles<{
  '::before': { width: number | string, height?: mixed },
}>;
styles7.foo as StyleXStyles<>;
styles7.foo as StyleXStyles<{ '::before': { width: '100%' } }>;
styles7.foo as StyleXStyles<{
  '::before': { width: number | string, height?: mixed },
}>;

stylex(styles7.foo);
stylex.props([styles7.foo]);

const vars = stylex.defineVars({
  accent: 'red',
});

vars.accent as StyleXVar<'red'>;

const styles8: $ReadOnly<{
  foo: $ReadOnly<{
    $$css: true,
    color: StyleXClassNameFor<'color', 'red'>,
  }>,
}> = stylex.create({
  foo: {
    color: vars.accent,
  },
});

styles8.foo as StaticStyles<>;
// $FlowExpectedError[incompatible-cast] - We want to disallow extra keys
styles8.foo as StaticStyles<{}>;
styles8.foo as StaticStyles<{ color: 'red' }>;
styles8.foo as StaticStyles<{ color: mixed }>;
// (styles8.foo as StaticStylesWithout<{ height: mixed }>);
// - @ts-expect-error - The style does have `width`
// (styles8.foo as StaticStylesWithout<{ color: mixed }>);
// $FlowExpectedError[incompatible-cast] - 'number' is not assignable to 'red'.
styles8.foo as StaticStyles<{ color: 100 }>;
// $FlowExpectedError[incompatible-cast] - 'blue' is not assignable to 'red'.
styles8.foo as StaticStyles<{ color: 'blue' }>;
styles8.foo as StaticStyles<{ color: number | string }>;
styles8.foo as StaticStyles<{ color?: mixed, height?: string }>;
styles8.foo as StyleXStyles<>;
// $FlowExpectedError[incompatible-cast] - We want to disallow extra keys
styles8.foo as StyleXStyles<{}>;
styles8.foo as StyleXStyles<{ color: 'red' }>;
styles8.foo as StyleXStyles<{ color: number | string }>;
styles8.foo as StyleXStyles<{ color?: mixed }>;
// (styles8.foo as StyleXStylesWithout<{ height: unknown }>);
// - @ts-expect-error - The style does have `color`
// (styles8.foo as StyleXStylesWithout<{ color: unknown }>);

stylex(styles8.foo);
stylex.props(styles8.foo);

export type TPseudoElStyle = $ReadOnly<{
  '::before': $ReadOnly<{
    display: 'none',
  }>,
  display: 'none',
}>;

const pseudoElStyles: MapNamespaces<$ReadOnly<{ default: TPseudoElStyle }>> =
  stylex.create({
    default: {
      display: 'none',
      '::before': {
        display: 'none',
      },
    },
  });

pseudoElStyles.default as $ReadOnly<{
  $$css: true,
  display?: StyleXClassNameFor<'display', 'none'>,
  '::before'?: StyleXClassNameFor<'::before', $ReadOnly<{ display?: 'none' }>>,
}>;

pseudoElStyles.default.display as StyleXClassNameFor<'display', 'none'>;

// pseudoElStyles.default['::before'] as ?number;

pseudoElStyles.default as StaticStyles<>;
